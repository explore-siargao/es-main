generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Rentals {
  id               Int            @id @default(autoincrement())
  rentalDetailsId  Int            @unique
  Details          RentalDetails  @relation(fields: [rentalDetailsId], references: [id])
  rentalRatesId    Int            @unique
  Pricing          RentalRates    @relation(fields: [rentalRatesId], references: [id])
  hostId           Int
  Host             User           @relation(fields: [hostId], references: [id])
  category         RentalCategory
  make             String
  modelBadge       String?
  bodyType         BodyType?
  fuel             Fuel?
  transmission     Transmission?
  year             String?
  qty              Int
  addOnsId         Int            @unique
  AddOns           RentalAdOns    @relation(fields: [addOnsId], references: [id])
  Photos           Photo[]
  Location         Addresses?
  finishedSections String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  addressesId      Int

  @@index([rentalDetailsId])
  @@index([rentalRatesId])
  @@index([hostId])
  @@index([addOnsId])
}

model RentalAdOns {
  id             Int      @id @default(autoincrement())
  roofRack       Boolean? @default(false)
  boardRack      Boolean? @default(false)
  babySeat       Boolean? @default(false)
  dashCam        Boolean? @default(false)
  includesHelmet Boolean? @default(false)
  others         String?  @db.LongText()
  Rentals        Rentals?
}

model RentalDetails {
  id                  Int       @id @default(autoincrement())
  engineCapacityLiter Float?    @db.Float
  engineCapacityCc    Int?      
  condition           Condition
  odometerKm          Int?
  exteriorColor       String?
  interiorColor       String?
  seatingCapacity     Int?
  weightCapacityKg    Float     @db.Float
  minAgeReq           Int
  isRegistered        String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  Rentals             Rentals?
}

model RentalRates {
  id              Int       @id @default(autoincrement())
  dayRate         Float     @db.Float
  requiredDeposit Float     @db.Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  Rentals         Rentals?
}

model User {
  Rentals          Rentals[]
  id               Int                @id @default(autoincrement())
  email            String             @unique @db.VarChar(255)
  password         String?            @db.VarChar(255)
  changePasswordAt DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  role             UserRole           @default(User)
  isHost           Boolean            @default(false)
  registrationType RegistrationType?
  deactivated      Boolean            @default(false)
  profilePicture   String?            @db.LongText
  canReceiveEmail  Boolean            @default(false)
  tax              Tax?
  listing          Listing[]
  reportListing    ReportListing[]
  paymentMethod    PaymentMethod[]
  wishes           WishGroup[]
  review           Review[]
  guest            Guests?
  MultiFactorAuth  MultiFactorAuth[]
  Coupons          Coupon[]
  taxId            Int?
  hostInfoId       Int?
  hostInfo         HostInfo?
  Booking          Booking[]
  Transaction      Transaction[]
  Notification     Notification[]
  ReportedUser     ReportUser[]       @relation("reportedUsers")
  reportedByuser   ReportUser[]       @relation("reportedByUsers")
  Property         Property[]
  BookableUnitType BookableUnitType[]
  BookableUnit     BookableUnit[]
  Cart             Cart[]
  SendMessage      Message[]          @relation("sender")
  ReceivedMessage  Message[]          @relation("receiver")
  Conversation     Conversation[]
  Activities       Activities[]
}

// model PersonalInfo {
//   id                Int                 @id @default(autoincrement())
//   userId            Int                 @unique
//   firstName         String              @db.VarChar(255)
//   middleName        String?             @db.VarChar(255)
//   lastName          String              @db.VarChar(255)
//   birthDate         DateTime?
//   governmentId      String?             @db.LongText
//   phoneNumber       String              @db.VarChar(20)
//   country           String              @db.VarChar(100)
//   language          String              @db.VarChar(50)
//   currency          String              @db.VarChar(10)
//   createdAt         DateTime            @default(now())
//   updatedAt         DateTime            @updatedAt
//   deletedAt         DateTime?
//   user              User                @relation(fields: [userId], references: [id])
//   address           Addresses?
//   emergencyContacts EmergencyContacts[]
//   confirm           String?             @db.VarChar(250)
//   profile           String?             @db.LongText()

//   @@index([userId])
// }

model HostInfo {
  id          Int      @id @default(autoincrement())
  userId      Int?     @unique
  user        User?    @relation(fields: [userId], references: [id])
  work        String   @db.VarChar(100)
  hostedSince DateTime @default(now())

  @@index([userId])
}

model EmergencyContacts {
  id            Int       @id @default(autoincrement())
  peronalInfoId Int
  name          String    @db.LongText
  relationship  String    @db.VarChar(100)
  email         String?   @db.VarChar(50)
  phoneNumber   String?   @db.VarChar(20)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  guest         Guests    @relation(fields: [peronalInfoId], references: [id])

  @@index([peronalInfoId])
}

model Addresses {
  id            Int         @id @default(autoincrement())
  peronalInfoId Int?        @unique
  activityId    Int?        @unique
  Activity      Activities?
  country       String?     @db.VarChar(255)
  guest         Guests?     @relation(fields: [peronalInfoId], references: [id])
  Rentals       Rentals?    @relation(fields: [rentalsId], references: [id])
  rentalsId     Int?        @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  city          String?     @db.LongText
  stateProvince String?     @db.LongText
  streetAddress String?     @db.LongText
  aptSuite      String?     @db.LongText
  zipCode       Int?

  @@index([peronalInfoId])
}

model ForgotPassword {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(255)
  code      String    @db.VarChar(255)
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  expiredAt DateTime
}

model MultiFactorAuth {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      String    @db.VarChar(255)
  code      String    @db.VarChar(255)
  used      Boolean   @default(false)
  expiredAt DateTime
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Listing {
  id                   Int                  @id @default(autoincrement())
  hostedById           Int
  images               String               @db.LongText
  title                String               @db.VarChar(100)
  descriptionId        Int?                 @unique
  listingDescription   ListingDescription?  @relation(fields: [descriptionId], references: [id])
  address              String               @db.LongText
  listingPriceId       Int                  @unique
  category             ListingCategory
  favoriteBy           String?
  whereYoullBe         String               @db.LongText()
  whereYoullSleep      String               @db.LongText()
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  deletedAt            DateTime?
  latitude             String?              @db.Text
  longitude            String?              @db.Text
  basicAboutPlaceId    Int?                 @unique
  hostedBy             User                 @relation(fields: [hostedById], references: [id])
  basicAboutPlace      BasicAboutPlace?     @relation(fields: [basicAboutPlaceId], references: [id], onDelete: Cascade)
  price                ListingPrice         @relation(fields: [listingPriceId], references: [id])
  highLights           ListingHighLights[]
  placeOffers          ListingPlaceOffers[]
  review               Review[]
  houseRules           HouseRule[]
  safetyProperties     SafetyProperty[]
  cancellationPolicies CancellationPolicy[]
  reports              ReportListing[]
  wishes               WishGroup[]
  Booking              Booking[]
  Notification         Notification[]
  Cart                 Cart[]
  Conversation         Conversation[]

  @@index([basicAboutPlaceId])
  @@index([listingPriceId])
  @@index([hostedById])
  @@index([descriptionId])
}

model ListingDescription {
  id                 Int       @id @default(autoincrement())
  listingId          Int?      @unique
  listing            Listing?
  generalDescription String    @db.LongText()
  aboutSpace         String?   @db.LongText()
  aboutGuestAccess   String?   @db.LongText()
  otherThingsNote    String?   @db.LongText()
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  @@index([listingId])
}

model BasicAboutPlace {
  id        Int       @id @default(autoincrement())
  guests    Int
  bedRooms  Int
  beds      Int
  bathRooms Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Listing   Listing?
}

model PaymentMethod {
  id          Int           @id @default(autoincrement())
  userId      Int
  cardInfo    String        @db.LongText
  cardType    String        @db.VarChar(255)
  lastFour    String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  isDefault   Boolean       @default(false)
  user        User          @relation(fields: [userId], references: [id])
  Booking     Booking[]
  Reservation Reservation[]

  @@index([userId])
}

model ReportListing {
  id         Int       @id @default(autoincrement())
  reports    String    @db.LongText()
  reportedBy Int
  user       User      @relation(fields: [reportedBy], references: [id])
  listingId  Int
  listing    Listing   @relation(fields: [listingId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@index([reportedBy])
  @@index([listingId])
}

model ReportUser {
  id             Int       @id @default(autoincrement())
  report         String    @db.LongText()
  reportedUserId Int
  reportedUser   User      @relation("reportedUsers", fields: [reportedUserId], references: [id])
  reportedBy     Int
  reportedByUser User      @relation("reportedByUsers", map: "reported_user_by", fields: [reportedBy], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@index([reportedBy])
  @@index([reportedUserId])
}

model Coupon {
  id             Int       @id @default(autoincrement())
  createdBy      Int?
  usedBy         Int?
  code           String    @unique
  expirationDate DateTime
  reward         String
  isUsed         Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  user           User?     @relation(fields: [usedBy], references: [id])

  @@index([usedBy])
}

model ListingPrice {
  id              Int       @id @unique @default(autoincrement())
  fee             Int
  serviceFee      Int
  cleaningFee     Int
  guestLimitCount Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  listing         Listing?
}

model HighLights {
  id        Int                 @id @default(autoincrement())
  title     String
  details   String
  icon      String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  deletedAt DateTime?
  listings  ListingHighLights[]
}

model ListingHighLights {
  id           Int        @id @default(autoincrement())
  listingId    Int
  highLightsId Int
  createdAt    DateTime   @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime   @updatedAt
  listing      Listing    @relation(fields: [listingId], references: [id])
  highlights   HighLights @relation(fields: [highLightsId], references: [id])

  @@unique([listingId, highLightsId])
  @@index([listingId])
  @@index([highLightsId])
}

model PlaceOffers {
  id                 Int                  @id @default(autoincrement())
  icon               String
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  category           String
  listingPlaceOffers ListingPlaceOffers[]
}

model ListingPlaceOffers {
  id           Int         @id @default(autoincrement())
  listingId    Int
  placeOfferId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  listing      Listing     @relation(fields: [listingId], references: [id])
  placeOffer   PlaceOffers @relation(fields: [placeOfferId], references: [id])

  @@unique([listingId, placeOfferId])
  @@index([listingId])
  @@index([placeOfferId])
}

model HouseRule {
  id        Int       @id @default(autoincrement())
  title     String
  listingId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  listing   Listing   @relation(fields: [listingId], references: [id])
  rules     Rule[]

  @@index([listingId])
}

model SafetyProperty {
  id        Int       @id @default(autoincrement())
  title     String
  listingId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  listing   Listing   @relation(fields: [listingId], references: [id])
  rules     Rule[]

  @@index([listingId])
}

model CancellationPolicy {
  id                 Int       @id @default(autoincrement())
  title              String
  cancelationDueDate DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  listingId          Int
  listing            Listing   @relation(fields: [listingId], references: [id])
  rules              Rule[]

  @@index([listingId])
}

model Rule {
  id                   Int                 @id @default(autoincrement())
  icon                 String
  rule                 String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  deletedAt            DateTime?
  cancellationPolicyId Int?
  description          String              @db.LongText()
  houseRuleId          Int?
  safePropertyId       Int?
  safetyProperty       SafetyProperty?     @relation(fields: [safePropertyId], references: [id])
  houseRule            HouseRule?          @relation(fields: [houseRuleId], references: [id])
  cancallationPolicy   CancellationPolicy? @relation(fields: [cancellationPolicyId], references: [id])

  @@index([houseRuleId])
  @@index([cancellationPolicyId])
  @@index([safePropertyId])
}

model WishGroup {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  listingId Int
  note      String?   @db.LongText
  user      User      @relation(fields: [userId], references: [id])
  listing   Listing   @relation(fields: [listingId], references: [id])

  @@index([userId])
  @@index([listingId])
}

model Review {
  id                 Int       @id @default(autoincrement())
  userId             Int
  cleanLinessRates   Int       @db.Int()
  accuracyRates      Int       @db.Int()
  checkInRates       Int       @db.Int()
  communicationRates Int       @db.Int()
  locationRates      Int       @db.Int()
  valueRates         Int       @db.Int()
  comment            String    @db.LongText
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  listingId          Int
  user               User      @relation(fields: [userId], references: [id])
  listing            Listing   @relation(fields: [listingId], references: [id])

  @@index([listingId])
  @@index([userId])
}

model Tax {
  id                 Int       @id @default(autoincrement())
  countryRegion      String    @db.VarChar(255)
  vatId              String    @db.VarChar(255)
  nameOnRegistration String    @db.VarChar(255)
  addressLine1       String    @db.VarChar(255)
  addressLine2       String    @db.VarChar(255)
  city               String    @db.VarChar(255)
  provinceRegion     String    @db.VarChar(255)
  zipPostalCode      String    @db.VarChar(255)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  User               User?     @relation(fields: [userId], references: [id])
  userId             Int?      @unique
}

model Booking {
  id                       Int            @id @default(autoincrement())
  listingId                Int
  Listing                  Listing?       @relation(fields: [listingId], references: [id])
  transactionId            Int?           @unique
  Transaction              Transaction?   @relation(fields: [transactionId], references: [id])
  userId                   Int
  User                     User?          @relation(fields: [userId], references: [id])
  fromDate                 DateTime
  toDate                   DateTime
  adultCount               Int
  childrenCount            Int
  infantCount              Int
  paymentType              PaymentType
  cardInfo                 String?        @db.LongText
  cardType                 String?        @db.VarChar(255)
  lastFour                 String?        @db.VarChar(255)
  totalFee                 Int?
  PaymentMethod            PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId          Int?
  xenditPaymentMethodId    String?        @unique @db.VarChar(255)
  xenditPaymentRequestId   String?        @unique @db.VarChar(255)
  xenditPaymentReferenceId String?        @unique @db.VarChar(255)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  deletedAt                DateTime?

  @@index([listingId])
  @@index([userId])
  @@index([transactionId])
  @@index([paymentMethodId])
}

model Transaction {
  id                     Int               @id @default(autoincrement())
  earnings               Float?            @db.Float
  xenditPaymentRequestId String?           @unique @db.VarChar(255)
  status                 TransactionStatus @default(Pending)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  deletedAt              DateTime?
  User                   User?             @relation(fields: [userId], references: [id])
  userId                 Int?
  Booking                Booking?
  Reservation            Reservation[]

  @@index([userId])
}

model Notification {
  id        Int              @id
  userId    Int
  User      User             @relation(fields: [userId], references: [id])
  listingId Int
  Listing   Listing          @relation(fields: [listingId], references: [id])
  type      NotificationType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?

  @@index([listingId])
  @@index([userId])
}

model Photo {
  id                 Int               @id @default(autoincrement())
  bookableUnitTypeId Int?
  propertyId         Int?
  key                String            @db.LongText()
  thumbKey           String            @db.LongText()
  description        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  BookableUnitType   BookableUnitType? @relation(fields: [bookableUnitTypeId], references: [id])
  Property           Property?         @relation(fields: [propertyId], references: [id])
  tag                String
  Activities         Activities?       @relation(fields: [activityId], references: [id])
  activityId         Int?
  rentalsId          Int?
  Rentals            Rentals?          @relation(fields: [rentalsId], references: [id])

  @@index([propertyId])
  @@index([bookableUnitTypeId])
  @@index([rentalsId])
  @@index([activityId])
}

model Feature {
  id                 Int              @id @default(autoincrement())
  bookableUnitTypeId Int
  feature            String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  BookableUnitType   BookableUnitType @relation(fields: [bookableUnitTypeId], references: [id])

  @@index([bookableUnitTypeId])
}

model BookableUnitBedConfig {
  id                 Int              @id @default(autoincrement())
  bookableUnitTypeId Int
  roomName           String           @db.VarChar(255)
  bedType            String
  bedQuantity        String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  BookableUnitType   BookableUnitType @relation(fields: [bookableUnitTypeId], references: [id])

  @@index([bookableUnitTypeId])
}

model BookableUnitType {
  id                                    Int                     @id @default(autoincrement())
  hostId                                Int
  Host                                  User                    @relation(fields: [hostId], references: [id])
  category                              String                  @db.VarChar(255)
  name                                  String                  @db.LongText()
  description                           String                  @db.LongText()
  isPrivate                             Boolean                 @default(false)
  maxGuest                              Int
  adultsIncluded                        Int
  childrenIncluded                      Int
  isMultiRoomUnit                       Boolean                 @default(false)
  qty                                   Int
  Amenities                             Amenities[]
  Photos                                Photo[]
  Features                              Feature[]
  BedConfigs                            BookableUnitBedConfig[]
  BookableUnit                          BookableUnit[]
  numBedrooms                           Int
  numBathrooms                          Int
  minNightlyRate                        Decimal                 @db.Decimal(10, 2)
  totalSizeSqm                          Decimal                 @db.Decimal(10, 2)
  additionalPricePerPerson              Decimal                 @db.Decimal(10, 2)
  thresholdOccupancyForAdditionalCharge Int
  unitPriceId                           Int                     @unique
  UnitPrice                             UnitPrice               @relation(fields: [unitPriceId], references: [id])
  createdAt                             DateTime                @default(now())
  updatedAt                             DateTime                @updatedAt
  deletedAt                             DateTime?

  @@index([unitPriceId])
  @@index([hostId])
}

model UnitPrice {
  id                       Int               @id @default(autoincrement())
  baseRate                 Decimal           @db.Decimal(10, 2)
  baseRateMaxcapacity      Int
  maximumCapacity          Int
  pricePerAdditionalPerson Decimal           @db.Decimal(10, 2)
  discountedWeekLyRate     Int
  discountMonthlyRate      Int
  BookableUnitType         BookableUnitType?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  deletedAt                DateTime?
}

model Guests {
  id                     Int                 @id @default(autoincrement())
  userId                 Int                 @unique
  User                   User                @relation(fields: [userId], references: [id])
  firstName              String              @db.VarChar(255)
  middleName             String?             @db.VarChar(255)
  lastName               String              @db.VarChar(255)
  language               String              @db.VarChar(50)
  currency               String              @db.VarChar(10)
  gender                 Gender?
  phone                  String              @db.VarChar(20)
  cellPhone              String              @db.VarChar(20)
  governmentId           String?             @db.LongText
  country                String              @db.VarChar(100)
  Address                Addresses?
  emergencyContacts      EmergencyContacts[]
  birthDate              DateTime?
  documentType           String?             @db.VarChar(20)
  documentNumber         String?             @db.VarChar(20)
  documentIssueDate      DateTime?
  documentIssuingCountry String?             @db.VarChar(20)
  documentExpirationDate DateTime?
  companyTaxId           Int?
  companyName            String?             @db.VarChar(255)
  confirm                String?             @db.VarChar(250)
  profile                String?             @db.LongText()
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  deletedAt              DateTime?
  Reservation            Reservation[]
  GuestReservation       GuestReservation[]
}

model Property {
  id                  Int            @id @default(autoincrement())
  hostId              Int
  offerBy             User           @relation(fields: [hostId], references: [id])
  taxId               Int?
  taxId2              Int?
  companyLegalName    String?        @db.VarChar(255)
  propertyType        PropertyType
  BookableUnit        BookableUnit[]
  Reservation         Reservation[]
  Facilities          Facilities[]
  Amenities           Amenities[]
  name                String?        @db.VarChar(255)
  description         String?        @db.LongText()
  currency            String?        @db.VarChar(10)
  primaryLanguage     String?        @db.VarChar(50)
  Photos              Photo[]
  phone               String?        @db.VarChar(20)
  email               String?        @unique @db.VarChar(255)
  Location            String?
  checkInTime         DateTime?
  checkOutTime        DateTime?
  lateCheckOutAllowed Boolean        @default(false)
  lateCheckOutType    String?        @db.VarChar(255)
  lateCheckoutValue   Float?
  termsAndConditions  String?        @db.LongText()
  type                PropertyType
  status              PropertyStatus @default(Incomplete)
  Policies            Policies[]
  finishedSections    String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?

  @@index([hostId])
}

model Policies {
  id         Int       @id @default(autoincrement())
  category   String    @db.VarChar(50)
  policy     String    @db.VarChar(100)
  reason     String    @db.LongText()
  propertyId Int?
  Property   Property? @relation(fields: [propertyId], references: [id])
  isSelected Boolean

  @@index([propertyId])
}

model Amenities {
  id                 Int               @id @default(autoincrement())
  category           String            @db.VarChar(50)
  amenity            String?           @db.VarChar(255)
  propertyId         Int?
  Property           Property?         @relation(fields: [propertyId], references: [id])
  bookableUnitTypeId Int?
  BookableUnitType   BookableUnitType? @relation(fields: [bookableUnitTypeId], references: [id])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([propertyId])
  @@index([bookableUnitTypeId])
}

model Facilities {
  id         Int       @id @default(autoincrement())
  category   String    @db.VarChar(50)
  propertyId Int?
  facility   String?   @db.VarChar(250)
  isSelected Boolean
  Property   Property? @relation(fields: [propertyId], references: [id])

  @@index([propertyId])
}

model BookableUnit {
  id                 Int              @id @default(autoincrement())
  propertyId         Int              @unique
  Property           Property         @relation(fields: [propertyId], references: [id])
  bookableUnitTypeId Int
  BookableUnitType   BookableUnitType @relation(fields: [bookableUnitTypeId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  reservationId      Int
  Reservation        Reservation      @relation(fields: [reservationId], references: [id])
  hostId             Int
  Host               User             @relation(fields: [hostId], references: [id])

  @@index([propertyId])
  @@index([bookableUnitTypeId])
  @@index([reservationId])
  @@index([hostId])
}

model Reservation {
  id                       Int                @id @default(autoincrement())
  propertyId               Int
  Property                 Property           @relation(fields: [propertyId], references: [id])
  status                   Status
  stardDate                DateTime
  endDate                  DateTime
  bookedUnits              BookableUnit[]
  mainGuestId              Int
  MainGuest                Guests             @relation(fields: [mainGuestId], references: [id])
  GuestList                GuestReservation[]
  transactionId            Int?               @unique
  Transaction              Transaction?       @relation(fields: [transactionId], references: [id])
  paymentType              PaymentType
  cardInfo                 String?            @db.LongText
  cardType                 String?            @db.VarChar(255)
  PaymentMethod            PaymentMethod?     @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId          Int?
  xenditPaymentMethodId    String?            @unique @db.VarChar(255)
  xenditPaymentRequestId   String?            @unique @db.VarChar(255)
  xenditPaymentReferenceId String?            @unique @db.VarChar(255)

  @@index([propertyId])
  @@index([mainGuestId])
  @@index([transactionId])
  @@index([paymentMethodId])
}

model GuestReservation {
  id            Int         @id @default(autoincrement())
  guestListId   Int
  reservationId Int
  GuestList     Guests      @relation(fields: [guestListId], references: [id])
  Reservation   Reservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
  @@index([guestListId])
}

//this partial
model Activities {
  id                            Int         @id @default(autoincrement())
  finishedSections              String?     @db.LongText()
  hostId                        Int
  host                          User        @relation(fields: [hostId], references: [id])
  title                         String      @db.VarChar(100)
  description                   String      @db.LongText()
  highLights                    String?     @db.LongText()
  durationHour                  Int
  durationMinute                Int
  language                      String      @db.MediumText()
  longitude                     Float       @db.Float()
  latitude                      Float       @db.Float()
  meetingPointDescription       String      @db.LongText()
  addressId                     Int         @unique
  address                       Addresses   @relation(fields: [addressId], references: [id])
  howToGetThere                 String
  isBuilderEnabled              Boolean
  isFoodIncluded                Boolean
  selectedFoodOptions           String      @db.LongText()
  isNonAlcoholicDrinkIncluded   Boolean
  isAlcoholicDrinkIncluded      Boolean
  selectedAlcoholicDrinkOptions String?      @db.LongText()
  otherInclusion                String      @db.LongText()
  notIncluded                   String      @db.LongText()
  whatToBring                   String      @db.LongText()
  notAllowed                    String      @db.LongText()
  policies                      String      @db.LongText()
  cancellationDays              String      @db.LongText()
  activityPhotos                Photo[]
  Itineraries                   Itinerary[]
  createdAt                     DateTime    @default(now())
  updatedAt                     DateTime    @updatedAt
  deletedAt                     DateTime?

  @@index([hostId])
}

model Itinerary {
  id                      Int           @id @default(autoincrement())
  type                    ItineraryType
  activities              String?       @db.LongText()
  activityPlace           String
  durationHour            Int
  durationMinute          Int
  isOptional              Boolean
  isRequiredAdditionalFee Boolean?
  additionalFee           Float         @default(0.00) @db.Float
  vehicleType             String?
  destinationNumber       Int
  activityId              Int
  Activity                Activities?    @relation(fields: [activityId], references: [id])

  @@unique([activityId, destinationNumber])
}

enum ItineraryType {
  Activity
  Transfer
}

enum Status {
  confirmed
  not_confirmed
  cancelled
  checked_in
  checked_out
  no_show
}

enum PropertyType {
  Hostel
  Homestay
  Hotel
  Apartment
  Resort
  Villa
}

enum Gender {
  M
  F
  NA
}

model Cart {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  listingId   Int
  Listing     Listing   @relation(fields: [listingId], references: [id])
  guestCounts String    @db.LongText()
  dateFrom    DateTime
  dateTo      DateTime
  totalFee    Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([userId])
  @@index([listingId])
}

model Message {
  id             Int            @id @default(autoincrement())
  Sender         User           @relation(fields: [senderId], references: [id], name: "sender")
  senderId       Int
  Receiver       User           @relation(fields: [receiverId], references: [id], name: "receiver")
  receiverId     Int
  message        String
  conversationId Int
  Conversation   Conversation[]
  createdAt      DateTime       @default(now())

  @@index([senderId])
  @@index([receiverId])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  listingId Int
  messageId Int
  guestId   Int
  Guest     User      @relation(fields: [guestId], references: [id])
  Listing   Listing   @relation(fields: [listingId], references: [id])
  Message   Message   @relation(fields: [messageId], references: [id])
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([guestId])
  @@index([listingId])
  @@index([messageId])
}

enum NotificationType {
  Booking
  AddedReview
}

enum UserRole {
  Admin
  User
}

enum RegistrationType {
  Manual
  Facebook
  Google
}

enum ListingCategory {
  Accomodation
  Rentals
  Activity
}

enum PaymentType {
  GCASH
  CreditDebit
  SavedCreditDebit
}

enum TransactionStatus {
  Succeed
  Failed
  Pending
  Refunded
}

enum BodyType {
  Hatchback
  Sedan
  SUV
  Pickup
  Van
}

enum Fuel {
  Petrol
  Diesel
  Electric
}

enum Transmission {
  Automatic
  SemiAutomatic
  Manual
}

enum Condition {
  Excellent
  Good
  Average
  Poor
}

enum PropertyStatus {
  Live
  Declined
  Pending
  Incomplete
}

enum RentalCategory {
  Car
  Motorbike
  Bicycle
}
